[default]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11.9"

    try: deploy
    except:
        deploy=False

    def splitDockerImageName(dockerImage):
        def extractNameAndTag(imageNameAndTag):
            imageName_tag = imageNameAndTag.split(":")
            if len(imageName_tag) == 2:
                return imageName_tag[0], imageName_tag[1]
            else:
                return imageName_tag[0], None

        dockerUser = None
        dockerImageName = None
        dockerImageTag = None

        user_imageNameAndTag = dockerImage.split("/")
        if len(user_imageNameAndTag) == 2:
            dockerUser = user_imageNameAndTag[0]
            dockerImageName, dockerImageTag = extractNameAndTag(user_imageNameAndTag[1])
        else:
            dockerImageName, dockerImageTag = extractNameAndTag(user_imageNameAndTag[0])

        return dockerUser, dockerImageName, dockerImageTag

    dockerUser, dockerImageName, dockerImageTag = splitDockerImageName(dockerImage)

    runTarget("in_container:container=\"%s\", targets=[\"install_deps\", \"init_git\", \"clean\", \"build\", \"unit_tests\", \"make_package\"]" % (dockerImage))
    
    if deploy != False:
        runTarget("deploy_package:host=\"sogimu.fvds.ru\",folder=\"glRender/%s-%s\"" % (dockerImageName, dockerImageTag))

[prepare_env_in]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11.9"
    runTarget("in_container:container=\"%s\", targets=[\"install_deps\", \"init_git\", \"clean\"]" % (dockerImage))

[build_in]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11.9"
    runTarget("in_container:container=\"%s\", targets=[\"install_deps\", \"build\"              ]" % (dockerImage))

[unit_tests_in]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11.9"
    runTarget("in_container:container=\"%s\", targets=[\"install_deps\", \"unit_tests\"         ]" % (dockerImage))

[make_package_in]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11.9"
    runTarget("in_container:container=\"%s\", targets=[\"install_deps\", \"make_package\"       ]" % (dockerImage))

[install_deps]
    runShell("apt-get update")
    runShell("apt-get -y install git cmake build-essential freeglut3-dev freeglut3 libxmu-dev libxi-dev doxygen rsync dpkg-dev qt5-default")

[init_git]
    runShell("git submodule update --init --recursive")

[clean]
    runShell("rm -rf ./build")

[build]
    runTarget("init_git")
    if not exists("./build"):
        makedirs("./build")
    with cd("./build"):
        buildId = os.getenv("BUILD_ID")
        if buildId != None and buildId != "":
            runShell("cmake .. -DBUILD_ID=%s" % buildId)
        else:
            runShell("cmake ..")

        runShell("make")

[unit_tests]
    with cd("./build/tests/unit-tests"):
        runShell("./tests")
        runShell("./tests -r junit -o unit_tests_results.xml")

[make_package]
    with cd("./build"):
        runShell("make package")

[deploy_package]
    try: host
    except:
        raise Exception("Необходимо ввести имя хоста!")
    try: folder
    except:
        raise Exception("Необходимо ввести путь к папке!")

    runShell("""
    bash -ecx
    '
        currentTag=$(git tag -l --points-at HEAD)
        if [ -z ${currentTag} ]; then
           echo "Нет git-тега. Я не буду выкладывать пакет в открытый доступ!";
        else
            echo "Git-тэг: "${currentTag}
            BUILDS=/var/lib/jenkins/public/%s
            echo "Путь к публичной папке: "${BUILDS}
            ssh jenkins@%s mkdir -p ${BUILDS}
            rsync build/*.deb jenkins@%s:${BUILDS}
            ssh jenkins@sogimu.fvds.ru "cd ${BUILDS}; ls; dpkg-scanpackages -m . | gzip --fast > Packages.gz"
        fi
    '
    """ % (folder, host, host))

[make_docs]
    if not exists("./build"):
        runShell("scenarist.py run build")
    with cd("./build/lib/"):
        runShell("doxygen Doxyfile") 

[deploy_docs]
    with cd("./build/lib/"):
        runShell(
        """
        bash -ec
        '
            currentTag=$(git tag -l --points-at HEAD)
            if [ -z ${currentTag} ]; then
                echo "No tag. I will not publish that commit!";
            else
                echo "Tag: "${currentTag}
                HEAD_SHA=$(git rev-parse --short HEAD)
                DIR=./public/glRender/docs/${HEAD_SHA}/
                LATEST_DIR=./public/glRender/docs/latest/
                echo "Path to docs: "${REPO}
                rsync -r ./docs/html/* jenkins@sogimu.fvds.ru:${DIR}
                rsync -r ./docs/html/* jenkins@sogimu.fvds.ru:${LATEST_DIR}
            fi
        '
        """)

[in_container]
    try: container
    except:
        raise Exception("Необходимо ввести имя docker-контейнера!")

    try: targets
    except:
        raise Exception("Необходимо ввести список целей!")

    f=open("Dockerfile","w")
    f.write("""FROM %s
    ADD scenario/ /scenario/
    WORKDIR /
    RUN apt-get update && \\
    apt-get install -y python wget sudo && \\
    adduser root sudo && \\
    cd /tmp && \\
    wget https://bootstrap.pypa.io/get-pip.py && \\
    python get-pip.py --force-reinstall && \\
    cd / && \\
    pip install -U build_scenarist && \\
    scenarist.py run install_deps""" % container)
    f.close()

    runShell("sudo docker pull %s" % container)
    runShell("sudo docker build -t %s-dev ." % container)
    runShell("""
        sudo docker run --rm -v %s:/repo %s-dev bash -cex '
            cd /repo
            scenarist.py info
            scenarist.py run %s
        '
        """ % (os.getcwd(), container, "  ".join(targets)))
